//!---1-----

//Write a sortPeople function that takes an array of strings names and an array of numbers heights,
//where names[i] == heights[i].It should sort the names array based on the heights array.

function sortPeople(names, heights) {
  const array = [];
  for (let [i, name] of names.entries()) {
    array.push([name, heights[i]]);
  }
  return array.sort((a, b) => b[1] - a[1]).map(([name]) => name);
}

const names = ["John", "Maria", "Alexa", "Robert"];
const heights = [180, 160, 165, 187];
console.log(sortPeople(names, heights)); // ['Robert', 'John', 'Alexa', 'Maria']

//!---2-----

//‚úÖ –ó–∞–¥–∞—á–∞ 1 (–ë–∞–∑–æ–≤–∞): –ü–æ–≤–µ—Ä–Ω–∏ –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∑ –æ–±'—î–∫—Ç—ñ–≤

const users = [
  { name: "Alice", age: 25 },
  { name: "Bob", age: 30 },
  { name: "Ann", age: 17 },
  { name: "Jack", age: 38 },
];

function makeNamesArray(users) {
  return users.map((user) => user.name);
}

console.log(makeNamesArray(users));
// ['Alice', 'Bob']

//‚úÖ –ó–∞–¥–∞—á–∞ 2: –ü–æ–≤–µ—Ä–Ω–∏ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 25

function getUsersOlderThan25(users) {
  return users.filter((user) => user.age >= 25);
}

console.log(getUsersOlderThan25(users));

//‚úÖ –ó–∞–¥–∞—á–∞ 3: –ü–æ–≤–µ—Ä–Ω–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

function getAverageAge(users) {
  const totalAge = users.reduce((total, user) => (total += user.age), 0);
  return totalAge / users.length;
}
console.log(getAverageAge(users));

//‚úÖ –ó–∞–¥–∞—á–∞ 4: –ó–Ω–∞–π–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–µ–≤–Ω–∏–º —ñ–º'—è–º

function findUser(users) {
  return users.find((user) => user.name === "Alice");
}
console.log(findUser(users));

//‚úÖ –ó–∞–¥–∞—á–∞ 5: –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ

function areUsersOver18(users) {
  return users.every((user) => user.age >= 18);
}
console.log(areUsersOver18(users));

//‚úÖ –ó–∞–¥–∞—á–∞ 6: –î–æ–¥–∞–π –Ω–æ–≤—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å 'isAdult: true/false' –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

function addNewValue(users) {
  return users.map((user) => ({
    ...user,
    isAdult: user.age >= 18,
  }));
}
console.log(addNewValue(users));

//‚úÖ –ó–∞–¥–∞—á–∞ 7: –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–µ–º (—Ç–≤–æ—è –∑ —ñ–Ω—Ç–µ—Ä–≤‚Äô—é üòé)

const data = [
  { id: 1, category: "fruit", name: "apple" },
  { id: 2, category: "vegetable", name: "carrot" },
  { id: 3, category: "fruit", name: "banana" },
  { id: 4, category: "vegetable", name: "pepper" },
  { id: 5, category: "dairy", name: "milk" },
];

function groupBy(data, category) {
  const result = {};

  data.forEach((item) => {
    const groupKey = item[category];

    if (!result[groupKey]) {
      result[groupKey] = [];
    }
    result[groupKey].push(item);
  });
  return result;
}
console.log(groupBy(data, "category"));

//‚úÖ –ó–∞–¥–∞—á–∞ 8: –ó–≥—Ä—É–ø—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –¥–µ—Å—è—Ç–∫–∞–º–∏ —Ä–æ–∫—ñ–≤ (10‚Äì19, 20‚Äì29, 30‚Äì39...)
// –ü–æ—Ä–∞—Ö—É–π—Ç–µ Math.floor(age / 10) * 10

function groupByAge(users, age) {
  const result = {};

  users.forEach((user) => {
    const ageValue = user[age];
    const groupAge = Math.floor(ageValue / 10) * 10;
    const groupKey = `${groupAge}-${groupAge + 9}`;

    if (!result[groupKey]) {
      result[groupKey] = [];
    }

    result[groupKey].push(user);
  });
  return result;
}
console.log(groupByAge(users, "age"));

//‚úÖ –ó–∞–¥–∞—á–∞ 9: –ü–æ–≤–µ—Ä–Ω–∏ –æ–±'—î–∫—Ç, –¥–µ –∫–ª—é—á ‚Äî —ñ–º'—è, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –≤—ñ–∫

//‚úÖ –ó–∞–¥–∞—á–∞ 10: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é countBy, —è–∫–∞ —Ä–∞—Ö—É—î —Å–∫—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç—ñ–≤ –∑ –∫–æ–∂–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–µ–≤–Ω–æ–≥–æ –∫–ª—é—á–∞

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥: countBy(users, 'gender') ‚Üí { male: 3, female: 2 }
